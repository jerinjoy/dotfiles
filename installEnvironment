#!/usr/bin/env python3

import argparse
import logging as log
import os
import subprocess

def run_command(command):
  log.debug(f"Running command: {command}")
  ret = subprocess.run(command, capture_output=True)
  if (ret.returncode != 0):
    print(ret.stdout.decode())
    print(ret.stderr.decode())
    log.error(f"Command failed: {command}")
  ret.check_returncode()

def softlink_dot_files():
  log.info("Setting up dot file softlinks")
  for dot_file in os.listdir("dot_files"):
    soft_link_target = f"{os.getenv('HOME')}/{dot_file}"
    # if os.path.exists(soft_link_target):
    #   log.debug(f"Removing existing file {soft_link_target}")
    #   os.remove(soft_link_target)
    log.debug(f"Creating soft link {soft_link_target} -> {dot_file}")
    # os.symlink(dot_file, soft_link_target)
  pass

def softlink_useful_scripts():
  log.info("Setting up useful script softlinks")
  for useful_script in os.listdir("useful_scripts"):
    soft_link_target = f"{os.getenv('HOME')}/{useful_script}"
    # if os.path.exists(soft_link_target):
    #   log.debug(f"Removing existing file {soft_link_target}")
    #   os.remove(soft_link_target)
    log.debug(f"Creating soft link {soft_link_target} -> {useful_script}")
    # os.symlink(useful_script, soft_link_target)
  pass

def set_up_git_name_and_email(name, email):
  log.info("Setting up User Name and Email for Git")
  run_command(["git", "config", "--global", "user.name", name])
  run_command(["git", "config", "--global", "user.email", email])
  pass

def configure_fish():
  # Reference: https://ar.al/2021/07/25/fish-shell/
  log.info("Configuring Fish Shell")

  log.info("Installing fisher (Fish Plugin Handler)")
  run_command(["fish", "-C", "'curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher && exit'"]);

  log.info("Installing the tide fish prompt")
  run_command(["fish", "-C", "'fisher install IlanCosman/tide && exit"])

  pass

def configure_zsh():
  pass

def main():
  parser = argparse.ArgumentParser(description=__doc__)
  parser.add_argument('--git_name', help='Your Name for Git Commits', required=True, type=str)
  parser.add_argument('--git_email', help='Your Email for Git Commits', required=True, type=str)
  parser.add_argument'--configure_fish',
                      help='Configure Fish.',
                      action='store_true',
                      default=True)
  parser.add_argument'--configure_zsh',
                      help='Configure ZSH.',
                      action='store_true',
                      default=False)
  parser.add_argument('-v',
                      '--verbose',
                      help='Verbose output.',
                      action='store_true',
                      default=False)
  args = parser.parse_args()

  if args.verbose:
    log.basicConfig(format="%(levelname)s: [%(threadName)s]: %(message)s", level=log.DEBUG)
  else:
    log.basicConfig(format="%(levelname)s: [%(threadName)s]: %(message)s", level=log.INFO)

  # Update all the submodules in dotfiles.
  run_command("git submodule update --init --recursive".split())

  softlink_dot_files()

  softlink_useful_scripts()

  set_up_git_name_and_email(args.git_name, args.git_email)

  if args.configure_fish == True:
    configure_fish()

  if args.configure_zsh == True:
    configure_zsh()

if __name__ == '__main__':
  main()

